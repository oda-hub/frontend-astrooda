<?php
use Drupal\Core\Form\FormStateInterface;
use Firebase\JWT\JWT;
use Firebase\JWT\Key;
use Drupal\Core\Logger\RfcLogLevel;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Url;
use Symfony\Component\HttpFoundation\RedirectResponse;

function mmoda_node_presave($node)
{
  $user = user_load_by_name('content-owner');
  if ($user) {
    $node->setOwnerId($user->id());
  }
}

function mmoda_help_pages_book_publish($module_name)
{
  mmoda_help_pages_book_edit_publish($module_name, true);
}

function mmoda_help_pages_book_unpublish($module_name)
{
  mmoda_help_pages_book_edit_publish($module_name, false);
}

function mmoda_help_pages_book_edit_publish($module_name, $publish)
{
  $nids = \Drupal::entityQuery('node')->accessCheck(TRUE)
  ->condition('type', 'mmoda_help_page')
  ->execute();
  $nodes = \Drupal\node\Entity\Node::loadMultiple($nids);

  foreach ($nodes as $node) {
    // field_mmoda_module
    $title_field = $node->get('field_mmoda_module');
    $mmoda_help_page_module_name = $title_field->getValue();
    if (! empty($mmoda_help_page_module_name) and ($mmoda_help_page_module_name[0]['value'] == $module_name)) {
      if ($publish)
        $node->setPublished();
        else
          $node->setUnpublished();
          $node->save();
    }
  }
}

/**
 * Implements hook_theme().
 */
function mmoda_theme($existing, $type, $theme, $path)
{
  return [
    'mmoda_common_form' => [
      'render element' => 'form'
    ],
    'mmoda_name_resolve_form' => [
      'render element' => 'form'
    ],
    'mmoda' => [
      'variables' => [
        'instruments' => [],
        'mmoda_data' => [],
        'name_resolve_form' => 'Name resolver form',
        'common_form' => 'Common form'
      ]
    ]
  ];
}

/**
 * Implements hook_token_info().
 */
function mmoda_token_info(): array
{
  $info = [];
  $types['jwt'] = [
    'name' => t("JWT token type"),
    'description' => t("JWT token")
  ];
  $jwt_token['jwt-token'] = [
    'name' => t("JWT token"),
    'description' => t("Current JWT token.")
  ];
  $logo_token['logo-url'] = [
    'name' => 'Site logo',
    'description' => t('Current theme site logo')
  ];

  $info = [
    'types' => $types,
    'tokens' => [
      'jwt' => $jwt_token,
      'site' => $logo_token
    ]
  ];
  return $info;
}

/**
 * Implements hook_tokens().
 */
function mmoda_tokens($type, $tokens, array $data = array(), array $options = array())
{
  $replacements = array();
  $token_service = \Drupal::token();
  if ($type == 'site') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'logo-url':
          $theme = \Drupal::config('system.theme')->get('default');
          $host = \Drupal::request()->getSchemeAndHttpHost();
          $logo_url = $host . theme_get_setting('logo', $theme)['url'];
          $replacements[$original] = $logo_url;
          break;

        default:
          break;
      }
    }
  }

  if ($type === 'jwt') {
    //global $user;
    $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
    $maxroomid_field = $user->get('field_matrix_room_id');
    $is_mxroomid_empty = $maxroomid_field->isEmpty();
    if ($is_mxroomid_empty)
      \Drupal::logger('mmoda_module')->log(RfcLogLevel::INFO, 'user field is empty');
    else
      \Drupal::logger('mmoda_module')->log(RfcLogLevel::INFO, 'user field is not empty');

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'jwt-token':
          if (\Drupal::currentUser()->isAuthenticated()) {
            $jwt_auth_service = \Drupal::service('jwt.authentication.jwt');

            $jwt_encoded_token = $jwt_auth_service->generateToken();
            \Drupal::logger('mmoda_module')->log(RfcLogLevel::INFO, 'jwt_encoded_token: @jwt_encoded_token',
              [
                '@jwt_encoded_token' => print_r($jwt_encoded_token, TRUE)
              ]);

            $jwt_transcoder_service = \Drupal::service('jwt.transcoder');
            $jwt_decoded_token = $jwt_transcoder_service->decode($jwt_encoded_token);

            $jwt_decoded_token->setClaim('sub', $user->get('mail')->value);
            $jwt_decoded_token->setClaim('email', $user->get('mail')->value);
            $jwt_decoded_token->setClaim('name', $user->get('name')->value);
            $jwt_decoded_token->setClaim('roles', $user->getRoles());

            if ($is_mxroomid_empty)
              unset($jwt_decoded_token->mxroomid);
            else
              $jwt_decoded_token->setClaim('field_matrix_room_id', $maxroomid_field->getValue()[0]['value']);

            \Drupal::logger('mmoda_module')->log(RfcLogLevel::INFO, 'jwt_decoded_token: @jwt_decoded_token',
              [
                '@jwt_decoded_token' => print_r($jwt_decoded_token->getPayload(), TRUE)
              ]);

            $jwt_encoded_token_updated = $jwt_transcoder_service->encode($jwt_decoded_token);
            $replacements[$original . '_updated'] = $jwt_encoded_token_updated;
          }
          break;
        default:
      }
    }
  }

  return $replacements;
}

function mmoda_tokens_alter(array &$replacements, array $context)
{
  if (array_key_exists('[jwt:jwt-token]_updated', $replacements)) {
    $replacements['[jwt:jwt-token]'] = $replacements['[jwt:jwt-token]_updated'];
    unset($replacements['[jwt:jwt-token]_updated']);
  }
  if (array_key_exists('[jwt:jwt-link]_updated', $replacements)) {
    $replacements['[jwt:jwt-link]'] = $replacements['[jwt:jwt-link]_updated'];
    unset($replacements['[jwt:jwt-link]_updated']);
  }
}

/**
 * Implements hook_preprocess_status_messages()
 */
function mmoda_preprocess_status_messages(&$variables)
{
  $matches = array();
  $openid_connect_email_taken_meessage_pattern = '/^The e-mail address <em class="placeholder">(.+)<\/em> is already taken\.$/';
  if (isset($_SESSION['messages']['error'][0]) and preg_match($openid_connect_email_taken_meessage_pattern, $_SESSION['messages']['error'][0], $matches)) {
    $_SESSION['messages']['error'][0] = 'Logging in with GitHub could not be completed as the e-mail address <em class="placeholder">' . $matches[1] .
      '</em> is already taken by an existing local account which is not connected to Github.';
    $_SESSION['messages']['error'][1] = 'Login with this account and edit it to connect it to GitHub (<a class="open-in-modal" href="help/mmoda/connect-my-mmoda-account-github">How to ?</a>)';
  }
}

/**
 * Implements hook_page_attachments().
 */
function mmoda_page_attachments(array &$attachments)
{
  // Unconditionally attach an asset to the page.
  //   dpm('attaching lib');
  //   $attachments['#attached']['library'][] = 'mmoda/bootstrap_form_validatorrrr';
}

function mmoda_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
  $open_id_form_id = 'openid-connect-login-form';
  if (str_starts_with($form['#id'], $open_id_form_id)) {
    $form['openid_connect_client_github_login']['#attributes']['class'] = array(
      "nav-item",
      "btn",
      "btn-secondary",
      "btn-sm",
      "rounded-0"
    );
  }
  switch ($form_id) {
    case 'webform_submission_your_api_token_add_form':
      $form['actions']['close'] = array(
        '#type' => 'submit',
        '#access' => TRUE,
        '#value' => t('Close'),
        '#weight' => 60,
        '#attributes' => array(
          'class' => array(
            'btn',
            'btn-primary',
            'close-copy-api-token-form'
          )
        )
      );
      break;
  }
}

/**
 * Implements hook_user_login().
 */
function mmoda_user_login($account)
{
  $current_route = Drupal::routeMatch()->getRouteName();
  $request = Drupal::request();
  if ($request->getRequestFormat() !== 'html') {
    return;
  }
  $destination = $request->query->get('destination');
  if ($destination && $destination != '/user/login') {
    return;
  }

  // Accessing the site in maintenance mode.
  if (\Drupal::state()->get('system.maintenance_mode') && ! $account->hasPermission('access site in maintenance mode')) {
    // The site is in maintenance mode and the user is not allowed in.
    // Step out and let Drupal handle it.
    \Drupal::service('request_stack')->getCurrentRequest()->query->set('destination', URL::fromUserInput('/')->toString());
  }

  if (! in_array($current_route, [
    'user.reset',
    'user.reset.login'
  ])) {
    // Redirect user on login.
    $url = '/';
    \Drupal::service('request_stack')->getCurrentRequest()->query->set('destination', URL::fromUserInput($url)->toString());
  }
}