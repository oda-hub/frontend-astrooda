<?php

/**
 * @file
 * Install, update and uninstall functions for the astrooda module.
 */
define ( 'D3_MIN_LIB_VERSION', '3.0' );
include_once 'astrooda_help_page.field_base.inc';
include_once 'astrooda_help_page.field_instance.inc';
include_once 'astrooda_help_page.inc';
include_once 'astrooda.help_page.inc';

/**
 * Implements hook_requirements().
 */
function astrooda_requirements($phase) {
  $requirements = array ();
  $conflicts = array ();
  if ('install' == $phase) {
    foreach ( astrooda_help_page_field_default_field_bases () as $field_new ) {
      $field_old = field_info_field ( $field_new ['field_name'] );
      if ($field_new ['field_name'] == $field_old ['field_name']) {
        $conflicts [] = $field_new ['field_name'];
      }
    }
    if (! empty ( $conflicts )) {
      $clist = implode ( ', ', $conflicts );
      $requirements ['astrooda'] = array (
          'title' => t ( 'title' ),
          'description' => t ( 'astrooda: Field %clist already exists.', array (
              '%clist' => $clist
          ) ),
          'severity' => REQUIREMENT_ERROR
      );
    }
  }

  if ($phase == 'runtime') {
    $t = get_t ();
    $library = libraries_detect ( 'd3' );
    $error_type = isset ( $library ['error'] ) ? drupal_ucfirst ( $library ['error'] ) : '';
    $error_message = isset ( $library ['error message'] ) ? $library ['error message'] : '';

    if (empty ( $library ['installed'] )) {
      $requirements ['D3_library'] = array (
          'title' => $t ( 'D3 library' ),
          'value' => $t ( '@e: At least @a', array (
              '@e' => $error_type,
              '@a' => D3_MIN_LIB_VERSION
          ) ),
          'severity' => REQUIREMENT_ERROR,
          'description' => $t ( '!error you need to download the !D3, extract the archive and place the D3 directory in the %path directory on your server.', array (
              '!error' => $error_message,
              '!D3' => l ( $t ( 'D3 library' ), $library ['download url'] ),
              '%path' => 'sites/all/libraries'
          ) )
      );
    } elseif (version_compare ( $library ['version'], D3_MIN_LIB_VERSION, '>=' )) {
      $requirements ['D3_library'] = array (
          'title' => $t ( 'D3 library' ),
          'severity' => REQUIREMENT_OK,
          'value' => $library ['version']
      );
    } else {
      $requirements ['D3_library'] = array (
          'title' => $t ( 'D3 library' ),
          'value' => $t ( 'At least @a', array (
              '@a' => D3_MIN_LIB_VERSION
          ) ),
          'severity' => REQUIREMENT_ERROR,
          'description' => $t ( 'You need to download a later version of the !D3 and replace the old version located in the %path directory on your server.', array (
              '!D3' => l ( $t ( 'D3 library' ), $library ['download url'] ),
              '%path' => $library ['library path']
          ) )
      );
    }
  }

  return $requirements;
}
function astrooda_add_custom_fields() {
  foreach ( astrooda_help_page_field_default_field_bases () as $field ) {
    field_create_field ( $field );
  }
  foreach ( astrooda_help_page_field_default_field_instances () as $instance ) {
    field_create_instance ( $instance );
  }
}
function astrooda_del_custom_fields() {
  foreach ( array_keys ( astrooda_help_page_field_default_field_bases () ) as $field ) {
    field_delete_field ( $field );
  }
  foreach ( astrooda_help_page_field_default_field_instances () as $instance ) {
    field_delete_instance ( $instance );
  }
}

/**
 * Implements hook_install().
 */
function astrooda_install() {
  //$astrooda_settings ['support_email'] = array('mohamed.meharga@unige.ch');
  $astrooda_settings ['support_email'] = array('no-reply@unige.ch', 'cdci-oda-feedback@listes.unige.ch');
  $astrooda_settings ['common'] ['dispatcher_path'] = '/dispatcher-data';
  $astrooda_settings ['common'] ['src_name'] = '1E 1740.7-2942';
  $astrooda_settings ['common'] ['RA'] = '265.97845833';
  $astrooda_settings ['common'] ['DEC'] = '-29.74516667';
  $astrooda_settings ['common'] ['T1'] = '2017-03-06T13:26:48.0';
  $astrooda_settings ['common'] ['T2'] = '2017-03-06T15:32:27.0';
  $astrooda_settings ['common'] ['T_format'] = 'isot';
  variable_set ( 'astrooda_settings', $astrooda_settings );
  variable_set ( 'astrooda_debug', true );

  // Add node types
  node_types_rebuild ();

  // Default to not to be promoted
  variable_set ( 'node_options_astrooda_help', array (
      'status'
  ) );

  // Disable comments
  variable_set ( 'comment_astrooda_help', COMMENT_NODE_CLOSED );

  // Hide date and author information
  variable_set ( 'node_submitted_astrooda_help', FALSE );

  astrooda_add_custom_fields ();

  // Disable node preview
  // variable_set('node_preview_astrooda_help', 0);

  // Disable menu entry
  // variable_set('menu_options_astrooda_help', array(0));

  // Do we need to do anything with the body field?
  // Remove next line if 'body' => 0.
  // node_add_body_field($bundle);

  // Add fields

  // add help node
  $node_array = astrooda_help_page_node_export_features_default ();
  $default_astrooda_base_url= '/cdci/astrooda';
  $astrooda_base_url= variable_get ( 'astrooda_base_url', $default_astrooda_base_url);
  $astrooda_base_url= !empty($astrooda_base_url) ? $astrooda_base_url : $default_astrooda_base_url;
    $node_array_code_string = preg_replace('/src=\\\\"[\/|\w]*\/sites\/default\/files\//', 'src=\\"'.$astrooda_base_url.'/sites/default/files/', $node_array ['code_string']);
  $import_output = node_export_import ( $node_array_code_string );
  if ($import_output ['success']) {
    $node = node_load ( $import_output ['nids'] [0] );
    $node->uid= 1;
    $node->status = 1;
    node_save ( $node );
    variable_set ( 'astrooda_help_page_nid', $node->nid );
  }
}

/**
 * Implements hook_uninstall().
 */
function astrooda_uninstall() {
  // Delete node content
  $bundles = array ();
  foreach ( astrooda_node_info () as $key => $value ) {
    $bundles [] = $key;
  }
  $nodeids = array ();
  foreach ( $bundles as $bundle ) {
    $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
    $result = db_query ( $sql, array (
        ':type' => $bundle
    ) );
    foreach ( $result as $row ) {
      $nodeids [] = $row->nid;
    }
  }
  // Delete all help pages
  if (! empty ( $nodeids )) {
    node_delete_multiple ( $nodeids );
  }
  // Delete all help page fields.
  astrooda_del_custom_fields ();
  // Delete bundles.
  foreach ( $bundles as $bundle ) {
    node_type_delete ( $bundle );
  }
  node_types_rebuild ();

  if (variable_get ( 'astrooda_help_page_nid' )) {
    variable_del ( 'astrooda_help_page_nid' );
  }
  menu_rebuild ();
  field_purge_batch ( 500 );

  // Delete settings
  variable_del ( 'astrooda_settings' );
}

