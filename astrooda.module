<?php
include_once 'astrooda.lib.inc';
require_once drupal_get_path('module', 'jwt_link') . '/JWT/Authentication/JWT.php';
require_once drupal_get_path('module', 'pathauto') . '/pathauto.inc';
use Firebase\JWT\JWT;

/**
 *
 * @file
 * Provides a block
 */
function astrooda_init()
{
  drupal_add_library('system', 'ui.draggable');
  drupal_add_library('system', 'ui.resizable');
  // drupal_add_library('system', 'effects.bounce');
  // drupal_add_library('system', 'effects.transfer');
  // drupal_add_library('system', 'effects.shake');
  drupal_add_library('system', 'effects.highlight');

  module_load_include('inc', 'astrooda', 'astrooda.common');

  $astrooda_settings = variable_get('astrooda_settings');
  if (! isset($astrooda_settings['instruments']))
    return;
  foreach ($astrooda_settings['instruments'] as $name => $instrument) {
    if ($instrument['enabled']) {
      module_load_include('inc', 'astrooda_' . $name, 'astrooda_' . $name);
    }
  }
  global $user;
  drupal_add_js(array(
    'user_uid' => $user->uid
  ), 'setting');
}

/**
 * Implements hook_user_login().
 */
function astrooda_user_login(&$edit, $account)
{
  if (! isset($_POST['form_id']) || $_POST['form_id'] != 'user_pass_reset') {
    // $astrooda_roles = preg_grep('/astrooda/i', $account->roles);
    $astrooda_roles = $account->roles;
    watchdog('ODA', 'Login - User Astrooda roles :' . implode(', ', $astrooda_roles));

    if (count($astrooda_roles)) {
      $jwt = jwt_link_url();
      $alg = variable_get('jwt_link_alg', 'HS256');
      $key = variable_get('jwt_link_key', '');
      $jwt_decoded_token = JWT::decode($jwt['jwt_encoded_token'], $key, array(
        $alg
      ));
      watchdog('ODA', 'Login - Adding token Cookie: ' . print_r($jwt_decoded_token, TRUE));
      user_cookie_save([
        'token' => $jwt['jwt_encoded_token']
      ]);
      // drupal_add_http_header('Authorization', 'Bearer '.$jwt['jwt_encoded_token']);
    }
  }
}

/**
 * Implements hook_user_logout().
 */
function astrooda_user_logout($account)
{
  // $astrooda_roles = preg_grep('/astrooda/i', $account->roles);
  $astrooda_roles = $account->roles;

  if (count($astrooda_roles)) {
    watchdog('ODA', 'Logout - removing the cookie token');
    user_cookie_delete('token');
  }
}

/**
 * Implements hook_help().
 */
function astrooda_help($path, $arg)
{
  $output = '';
  switch ($path) {
    case 'admin/help#astrooda':
      $output = '<p>';
      $output .= t("Online data analysis system.");
      $output .= '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_block_info().
 */
function astrooda_block_info()
{
  $blocks = array();
  $blocks['astrooda_main'] = array(
    'info' => t("Astrooda"),
    'status' => TRUE,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => '<front>',
    'cache' => DRUPAL_NO_CACHE
  );

  return $blocks;
}

/**
 * Implementation of hook_permission().
 */
function astrooda_permission()
{
  return array(
    'administer astrooda' => array(
      'description' => t('Administer Data Analysis'),
      'title' => t('Administer Data Analysis'),
      'restrict access' => TRUE
    ),
    'access astrooda' => array(
      'description' => t('Access Data Analysis'),
      'title' => t('Access Data Analysis'),
      'restrict access' => TRUE
    )
  );
}

/**
 * Menu callback.
 * Prints a listing of active nodes on the site.
 */
function astrooda_menu()
{
  $items = array();

  $items['admin/config/astrooda'] = array(
    'title' => 'Administer Data Analysis',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'astrooda_admin_settings'
    ),
    'description' => 'Edit data analysis settings.',
    'file' => 'astrooda.admin.inc'
  );

  return $items;
}

/**
 * Implements hook_block_view().
 */
function astrooda_block_view($delta)
{
  $block = array();
  switch ($delta) {
    case 'astrooda_main':
      $block = array(
        // 'subject' => t ( "Astro Online Data Analysis" ),
        'subject' => '<none>',
        'content' => astrooda_main_block_content()
      );
  }
  return $block;
}

/**
 * Generates the actual content of the iPrayTimes block.
 */
function user_feedback_form_content($form)
{
  $theme_args['bug_report_form'] = drupal_get_form($form);
  // $filename = 'formus.php';
  // $f = fopen($filename, 'w');
  // fwrite($f, "form:" . $form . "\n");
  // fwrite($f, print_r($items['bug_report_form'], true));
  // fclose($f);
  // chmod($filename, 0777);

  $theme_args['#theme'] = 'send-bug-report';

  return drupal_render($theme_args);
}

/**
 * Generates the actual content of the iPrayTimes block.
 */
function astrooda_main_block_content()
{
  $session_id = session_id();

  if (! isset($_SESSION['count'])) {
    $_SESSION['count'] = 0;
  } else {
    $_SESSION['count'] ++;
  }
  $session_count = $_SESSION['count'];

  if (isset($_SERVER["HTTP_REFERER"]) and strlen($_SERVER["HTTP_REFERER"]) and ! isset($_SESSION['url_parameters'])) {
    parse_str(parse_url($_SERVER["HTTP_REFERER"], PHP_URL_QUERY), $params);
  } else {
    $params = drupal_get_query_parameters();
  }
  if ($params) {
    $_SESSION['url_parameters'] = $params;
  } else if (array_key_exists('url_parameters', $_SESSION)) {
    drupal_add_js(array(
      'url_parameters' => $_SESSION['url_parameters']
    ), array(
      'type' => 'setting',
      'scope' => JS_DEFAULT
    ));

    unset($_SESSION['url_parameters']);
  }

  $libname = 'bootstrap-form-validator';

  if (! ($library = libraries_load($libname)) || empty($library['loaded'])) {
    $libraries_OK = False;
    drupal_set_message(t('Error : can not load bootstrap form validator library.'), 'error');
    return;
  }

  if (! ($library_datatables = libraries_load('datatables')) || empty($library_datatables['loaded'])) {
    drupal_set_message(t('Error : can not load DataTables library.'), 'error');
    return;
  }
  if (! ($library_highlightjs = libraries_load('highlight')) || empty($library_datatables['loaded'])) {
    drupal_set_message(t('Error : can not load highlightjs library.'), 'error');
    return;
  }
  if (! ($library_bokeh = libraries_load('bokeh')) || empty($library_bokeh['bokeh'])) {
    // drupal_set_message ( t ( 'Error : can not load Bokeh library.' ), 'error' );
    // return;
  }
  // drupal_add_js ( 'var $j = jQuery.noConflict();', array (
  // 'type' => 'inline',
  // 'scope' => 'header',
  // 'group' => JS_LIBRARY,
  // 'weight' => - 1
  // ) );

  drupal_add_css(drupal_get_path('module', 'astrooda') . '/astrooda.css');

  drupal_add_js(drupal_get_path('module', 'astrooda') . '/js/astrooda.common.js');
  drupal_add_js(drupal_get_path('module', 'astrooda') . '/js/astrooda.instrument.js');

  $items = array();

  $astrooda_settings = variable_get('astrooda_settings');
  // unset($astrooda_settings['astrooda_support_email']);
  // $astrooda_settings ['support_email'] = array('mohamed.meharga@unige.ch');
  // variable_set ( 'astrooda_settings', $astrooda_settings );

  $items['session_id'] = $session_id;
  $items['session_count'] = $session_count;
  $items['common_form'] = drupal_get_form('astrooda_common');
  $items['astrooda_debug'] = $astrooda_settings['astrooda_debug'];
  $items['auth_cookie'] = '_oauth2_proxy';

  if (empty($astrooda_settings['instruments'])) {
    return theme('astrooda_main_block_content', $items);
  }

  // error_log ( "---------------------------------------------" );
  $items['api_token_tip'] = 'Request API token';
  $items['api_token_request_or_copy'] = 'ctools-use-modal';
  if (user_is_logged_in()) {
    $items['api_token_tip'] = 'Copy API token to clipboard';
    $items['api_token_request_or_copy'] = 'copy-token-clipboard';
  }
  $items['help_page'] = drupal_get_path_alias('node/' . $astrooda_settings['help_page_nids'][0]);

  foreach ($astrooda_settings['instruments'] as $name => $instrument) {
    $instruments[$instrument['weight']] = $name;
  }
  ksort($instruments);
  $weight_sorted_instruments = array_values($instruments);
  $first_instrument = true;
  foreach ($weight_sorted_instruments as $instrument_name) {
    $instrument = $astrooda_settings['instruments'][$instrument_name];
    if ($instrument['enabled']) {
      $items['instruments'][$instrument['name']] = array(
        'name' => $instrument['name'],
        'title' => $instrument['title'],
        'acknowledgement' => isset($instrument['acknowledgement']) ? $instrument['acknowledgement'] : '',
        'help_page' => drupal_get_path_alias('node/' . $instrument['help_page_nids'][0]),
        'form' => drupal_get_form('astrooda_' . $instrument['name']),
        'active' => ''
      );
      if ($first_instrument) {
        $items['instruments'][$instrument['name']]['active'] = 'active';
        $first_instrument = false;
      }
    }
  }

  // $lfile = fopen ( '/tmp/astrooda_instruments.php', "w" );
  // fwrite ( $lfile, print_r ( $items, true ) );
  // fclose ( $lfile );

  return theme('astrooda_main_block_content', $items);
}

/**
 * Generates the actual content of the iPrayTimes block.
 */
function astrooda_get_settings()
{
  $js = array();

  return ($js);
}

/**
 * Implements hook_theme().
 */
function astrooda_theme($existing, $type, $theme, $path)
{
  // Custom template for that overrides the default block.tpl.php.
  $theme_items['astrooda_main_block_content'] = array(
    'template' => 'astrooda-main',
    'path' => drupal_get_path('module', 'astrooda') . '/templates',
    'variables' => array(
      'items' => NULL
    )
  );
  $theme_items['send-bug-report'] = array(
    'template' => 'user-feedback',
    'path' => drupal_get_path('module', 'astrooda') . '/templates',
    'variables' => array(
      'items' => NULL
    )
  );

  return $theme_items;
}

function astrooda_array_member($val, $myArray)
{
  foreach ($myArray as $av) {
    if ($av == $val) {
      return (true);
    }
  }
  return (false);
}

/**
 * Implements hook_libraries_info().
 *
 * For defining external libraries.
 */
function astrooda_libraries_info()
{
  $libraries['datatables'] = array(
    'name' => 'Table plug-in for jQuery',
    'vendor url' => 'https://datatables.net/',
    'download url' => 'https://datatables.net/download/index',
    // 'version arguments' => array (
    // 'file' => 'datatables.js', // Could be any file with version info
    // 'pattern' => '/version +(\d+\.\d+\.\d+)$/'
    // ),
    'version callback' => 'short_circuit_version',
    'files' => array(
      'js' => array(
        'datatables.min.js',
        'Select/js/dataTables.select.min.js',
        'Buttons/js/dataTables.buttons.min.js',
        'Responsive/js/dataTables.responsive.min.js',
        'Editor/js/dataTables.editor.min.js',
        'Editor/js/editor.bootstrap.min.js'
      ),
      'css' => array(
        'dataTables.bootstrap.min.css',
        'Buttons/css/buttons.dataTables.min.css',
        'Responsive/css/responsive.dataTables.min.css',
        'Select/css/select.dataTables.min.css',
        'Editor/css/editor.bootstrap.css'
      )
    )
  );
  $libraries['bootstrap-form-validator'] = array(
    'name' => 'Bootstrap Form Validator library',
    'vendor url' => 'http://bootstrapvalidator.com',
    'download url' => 'https://github.com/nghuuphuoc/bootstrapvalidator',
    'version callback' => 'short_circuit_version',
    'files' => array(
      'js' => array(
        'js/bootstrapValidator.min.js'
      )
    )
  );

  $libraries['bokeh'] = array(
    'name' => 'Bokeh',
    'vendor url' => 'https://bokeh.pydata.org',
    'download url' => 'https://bokeh.pydata.org',
    'version callback' => 'short_circuit_version',
    'files' => array(
      'js' => array(
        'bokeh.min.js',
        'bokeh-widgets.min.js'
      ),
      'css' => array(
        'bokeh.min.css',
        'bokeh-widgets.min.css'
      )
    )
  );

  $libraries['highlight'] = array(
    'name' => 'highlight.js',
    'vendor url' => 'https://highlightjs.org/',
    'download url' => 'https://highlightjs.org/download/',
    'version callback' => 'short_circuit_version',
    'files' => array(
      'js' => array(
        'highlight.min.js'
      ),
      'css' => array(
        'default.min.css'
      )
    )
  );

  return $libraries;
}

// function astrooda_action_info()
// {
// return user_registration_notify_user_managers_features_actions_triggers_export_actions_default();
// }

// function astrooda_trigger_info()
// {
// return user_registration_notify_user_managers_features_actions_triggers_export_triggers_default();
// }
function short_circuit_version()
{
  // use some fancy magic to get the version number... or don't
  return TRUE;
}

function mmoda_resave_help_book_nodes_to_trigger_export(&$form, &$form_state)
{
  foreach (element_children($form['table']) as $key) {
    if ($form['table'][$key]['#item']) {
      $values = $form_state['values']['table'][$key];
      $node = node_load($values['nid']);
      mmoda_export_help_page_after_insert_or_update($node);
    }
  }
}

function astrooda_form_alter(&$form, &$form_state, $form_id)
{
  switch ($form_id) {
    case 'user_register_form':
      module_load_include ('inc', 'astrooda', 'astrooda.users');
      customize_registration_form($form);
    case 'book_admin_edit':
      $form['#submit'][] = 'mmoda_resave_help_book_nodes_to_trigger_export';
      break;
    case 'jwt_link_admin':
      $form['jwt_link_expiration']['#maxlength'] = 4;

      break;
    case 'webform_client_form_384':
      $form['actions']['close'] = array(
        '#type' => 'submit',
        '#access' => TRUE,
        '#value' => 'Close',
        '#weight' => 60,
        '#submit' => array(
          'node_form_cancel'
        ),
        '#attributes' => array(
          'class' => array(
            'ctools-close-modal',
            'btn',
            'btn-primary'
          )
        )
      );
      $form['actions']['submit']['#attributes']['class'][] = 'btn';
      $form['actions']['submit']['#attributes']['class'][] = 'btn-primary';
      // $filename = 'sites/default/files/form.php';
      // $f = fopen($filename, 'w');
      // fwrite($f, "form:\n");
      // fwrite($f, print_r($form, true));
      // fclose($f);
      // chmod($filename, 0777);
      break;
  }
}

/**
 * Alter the pattern to be used before an alias is generated by Pathauto.
 *
 * @param string $pattern
 *          The alias pattern for Pathauto to pass to token_replace() to generate the
 *          URL alias.
 * @param array $context
 *          An associative array of additional options, with the following elements:
 *          - 'module': The module or entity type being aliased.
 *          - 'op': A string with the operation being performed on the object being
 *          aliased. Can be either 'insert', 'update', 'return', or 'bulkupdate'.
 *          - 'source': A string of the source path for the alias (e.g. 'node/1').
 *          - 'data': An array of keyed objects to pass to token_replace().
 *          - 'type': The sub-type or bundle of the object being aliased.
 *          - 'language': A string of the language code for the alias (e.g. 'en').
 *          This can be altered by reference.
 */
function astrooda_pathauto_pattern_alter(&$pattern, array &$context)
{
  // if ($context['module'] == 'node' && ($context['op'] == 'insert' or $context['op'] == 'update') && ($context['type'] == 'mmoda_help_page')) {
  // $pattern = preg_replace('/content/', 'help', $pattern);
  // }
}

function astrooda_node_delete($node)
{
  $mmoda_module = field_get_items('node', $node, 'field_mmoda_module')[0]['value'];
  if (variable_get('mmoda_uninstall_started', false)) {
    return;
  }

  if ($node->type != 'mmoda_help_page' or empty($node->nid))
    return;

  $export_format = 'php';
  $module_help_book_path = drupal_get_path('module', $mmoda_module) . '/help_book';

  $help_filename = pathauto_clean_alias(pathauto_cleanstring($node->title));
  $help_filename = $module_help_book_path . DIRECTORY_SEPARATOR . $help_filename . '.' . $export_format;
  $help_file_exist = file_exists($help_filename);
  if ($help_file_exist and unlink($help_filename)) {
    drupal_set_message('[Module ' . $mmoda_module . '] Help file ' . $help_filename . ' deleted successfully');
  } else if ($help_file_exist) {
    drupal_set_message('[Module ' . $mmoda_module . '] Can not delete the corresponding help file ' . $help_filename);
  }
}

function astrooda_node_insert($node)
{
  mmoda_export_help_page_after_insert_or_update($node, TRUE);
}

function astrooda_node_update($node)
{
  mmoda_export_help_page_after_insert_or_update($node);
}

function mmoda_export_help_page_after_insert_or_update($node, $insert = FALSE)
{
  // return;
  if ($node->type != 'mmoda_help_page' or empty($node->nid))
    return;
  $export_format = 'php';
  $nid = $node->nid;

  $node_export_obj = node_export(intval($nid), $export_format, 't', TRUE);
  $mmoda_module = field_get_items('node', $node, 'field_mmoda_module')[0]['value'];
  if (variable_get('mmoda_install_started', false)) {
    return;
  }
  $module_help_book_path = drupal_get_path('module', $mmoda_module) . '/help_book';

  if (! is_writable($module_help_book_path)) {
    drupal_set_message(t("The module help page directory is not writable\n" . "Your changes have been saved in the database only and not in the file system\n" . "Therefore, they are not persistent with the module"), 'warning');
    return;
  }
  $filename = pathauto_clean_alias(pathauto_cleanstring($node->title));
  $filename = $module_help_book_path . DIRECTORY_SEPARATOR . $filename . '.' . $export_format;
  $set_file_group_writable = ! file_exists($filename);
  $f = fopen($filename, 'w');
  if (! $f) {
    throw new Exception("Can not export the help page file $filename");
  }
  fwrite($f, $node_export_obj['output']);
  fclose($f);

  drupal_set_message('[Module ' . $mmoda_module . '] Help page "' . $node->title . '" exported successfully ' . $filename);
  if ($set_file_group_writable)
    chmod($filename, 0664);
  if (! $insert and property_exists($node, 'original')) {
    $old_filename = pathauto_clean_alias(pathauto_cleanstring($node->original->title));
    $old_filename = $module_help_book_path . DIRECTORY_SEPARATOR . $old_filename . '.' . $export_format;
    if ($filename !== $old_filename and file_exists($old_filename) and unlink($old_filename)) {
      drupal_set_message('[Module ' . $mmoda_module . '] Deleting old file ' . $old_filename);
    }
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function astrooda_theme_registry_alter(&$theme_registry)
{
  // Override the default field-collection-item.tpl.php with our own.
  if (isset($theme_registry['colorbox_insert_image'])) {
    $module_path = drupal_get_path('module', 'astrooda');
    $theme_registry['colorbox_insert_image']['theme path'] = $module_path;
    $theme_registry['colorbox_insert_image']['template'] = $module_path . '/templates/colorbox-insert-image';
  }
}

function astrooda_mail_alter(&$message)
{
  $language = $message['language'];

  $target_message_id = 'user_register_pending_approval_admin';
  if ($message['id'] == $target_message_id) {
    $account = array(
      'user' => $message['params']['account']
    );
    unset($message['body']);
    $core_module_name = pathinfo(__FILE__, PATHINFO_FILENAME);
    $module_settings = variable_get($core_module_name . '_settings', array());
    if (array_key_exists('user_managers_role_id', $module_settings) and is_numeric($module_settings['user_managers_role_id'])) {
      $user_managers = mmoda_get_users_with_role((int)$module_settings['user_managers_role_id']);
      $user_managers_emails = array_column($user_managers, 'mail');
      // Change email recipient to the list of user managers emails
      $message['to'] = join(',', $user_managers_emails);
    }
    $user_managers_role = 'user manager';
    // Change the text
    $text = t(file_get_contents(drupal_get_path('module', $core_module_name) . '/templates/' . $target_message_id . '.html'));
    $message['body'][] = token_replace($text, $account, array(
      'language' => $language,
      'callback' => 'user_mail_tokens',
      'sanitize' => FALSE,
      'clear' => TRUE
    ));
  }
}

